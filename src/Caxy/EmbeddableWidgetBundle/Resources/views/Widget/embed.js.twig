(function (global) {
    // add array index of for old browsers (IE<9)
    if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function (obj, start) {
            var i, j;
            i = start || 0;
            j = this.length;
            while (i < j) {
                if (this[i] === obj) {
                    return i;
                }
                i++;
            }
            return -1;
        };
    }

    // make a global object to store stuff in
    if (!global.BestMoneyMovesWidgets) {
        global.BestMoneyMovesWidgets = {};
    };
    var BestMoneyMovesWidgets = global.BestMoneyMovesWidgets;

    // To keep track of which embeds we have already processed
    if (!BestMoneyMovesWidgets.processedScripts) {
        BestMoneyMovesWidgets.processedScripts = [];
    };
    var processedScripts = BestMoneyMovesWidgets.processedScripts;

    if (!BestMoneyMovesWidgets.styleTags) {
        BestMoneyMovesWidgets.styleTags = [];
    };
    var styleTags = BestMoneyMovesWidgets.styleTags;

    if (!BestMoneyMovesWidgets.externalScriptTags) {
        BestMoneyMovesWidgets.externalScriptTags = [];
    }
    var externalScriptTags = BestMoneyMovesWidgets.externalScriptTags;

    if (!BestMoneyMovesWidgets.widgetStyleTags) {
        BestMoneyMovesWidgets.widgetStyleTags = [];
    }
    var widgetStyleTags = BestMoneyMovesWidgets.widgetStyleTags;

    var scriptTags = document.getElementsByTagName('script');
    var thisRequestUrl = '{{ requestUrl|raw }}';

    for (var i = 0; i < scriptTags.length; i++) {
        var scriptTag = scriptTags[i];

        // src matches the url of this request, and not processed it yet.
        if (scriptTag.src == thisRequestUrl && processedScripts.indexOf(scriptTag) < 0) {

            processedScripts.push(scriptTag);

            // add the style tag into the head (once only)
            if (styleTags.length == 0) {
                // add a style tag to the head
                var styleTag = document.createElement("link");
                styleTag.rel = "stylesheet";
                styleTag.type = "text/css";
                styleTag.href = '{{ asset('bundles/caxyembeddablewidget/css/widgets.css', null, true) }}';
                styleTag.media = "all";
                document.getElementsByTagName('head')[0].appendChild(styleTag);
                styleTags.push(styleTag);

                // add link to google font.
                var fontStyleTag = document.createElement("link");
                fontStyleTag.rel = "stylesheet";
                fontStyleTag.type = "text/css";
                fontStyleTag.href = "//fonts.googleapis.com/css?family=Oxygen:300,700";
                fontStyleTag.media = "all";
                document.getElementsByTagName('head')[0].appendChild(fontStyleTag);
                styleTags.push(fontStyleTag);
            }

            {% if widgetCss %}
                var thisWidgetCss = '{{ asset(widgetCss, null, true) }}';
                if (widgetStyleTags.indexOf(thisWidgetCss) < 0) {
                    // add special widget styles to the head
                    var widgetStyleTag = document.createElement("link");
                    widgetStyleTag.rel = "stylesheet";
                    widgetStyleTag.type = "text/css";
                    widgetStyleTag.href = thisWidgetCss;
                    widgetStyleTag.media = "all";
                    document.getElementsByTagName('head')[0].appendChild(widgetStyleTag);
                    widgetStyleTags.push(thisWidgetCss);
                }
            {% endif %}

            if (externalScriptTags.length == 0) {
                // add typekit script to the head
                var typekitScriptTag = document.createElement("script");
                typekitScriptTag.src = "https://use.typekit.net/tj04jkj.js";
                document.getElementsByTagName('head')[0].appendChild(typekitScriptTag);
                externalScriptTags.push(typekitScriptTag);

                var typekitInitScriptTag = document.createElement("script");
                typekitInitScriptTag.innerHTML = 'try{Typekit.load({ async: true });}catch(e){}';
                document.getElementsByTagName('head')[0].appendChild(typekitInitScriptTag);
                externalScriptTags.push(typekitInitScriptTag);
            }

            // Create a div
            var div = document.createElement('div');
            div.id = '{{ widgetId }}';

            // add the cleanslate classs for extreme-CSS reset.
            div.className = 'bmm-widget bmm-widget-{{ widgetType }}';

            scriptTag.parentNode.insertBefore(div, scriptTag);

            {% set widgetContent = include(widgetHtml) %}

            div.innerHTML = {{ widgetContent|json_encode|raw }};
        }
    }

    // Include any javascript that is specific to this widget.
    {% if widgetJs %}
        {% include widgetJs ignore missing with { widgetId: widgetId } %}
    {% endif %}

})(this);
